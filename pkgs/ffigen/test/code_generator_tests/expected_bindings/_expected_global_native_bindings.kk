// Copyright (c) 2024, the Koka-Community. 
// 
// All rights reserved. Use of this source code is governed by a
// MIT-style license that can be found in the LICENSE file.
// Ffigen is adapted from dart's ffigen which is under a BSD Style License in the LICENSE file.

// AUTO GENERATED FILE, DO NOT EDIT.
// 
// Generated by `ffigen`.

module bindings

import std/cextern as ffi

extern import
  c file "test"

pub extern external/test1(): int32
  c inline "test1"

pub fun wrapper/test1(): int
  external/test1().int

pub extern external/test2(): ffi.owned-c<float32>
  c inline "test2"

pub val wrapper/test2: ffi.owned-c<float32> = external/test2()

pub extern external/test3(): ffi.c-array<float32>
  c inline "test3"

pub val wrapper/test3: ffi.c-array<float32> = external/test3()

pub extern external/test5(): ffi.owned-c<some-c>
  c inline "test5"

pub fun wrapper/test5(): ffi.owned-c<some-c>
  external/test5()

pub extern external/globalStruct(): emptystruct-c
  c inline "globalStruct"

pub fun wrapper/globalStruct(): emptystruct-c
  external/globalStruct()

pub type some-c
alias somec = ffi.owned-c<some-c>
alias somecb = ffi.borrowed-c<some-c>
alias someca = ffi.owned-c<ffi.c-array<some-c>>

pub type emptystruct-c
alias emptystructc = ffi.owned-c<emptystruct-c>
alias emptystructcb = ffi.borrowed-c<emptystruct-c>
alias emptystructca = ffi.owned-c<ffi.c-array<emptystruct-c>>

