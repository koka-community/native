// Copyright (c) 2024, the Koka-Community. 
// 
// All rights reserved. Use of this source code is governed by a
// MIT-style license that can be found in the LICENSE file.
// Ffigen is adapted from dart's ffigen which is under a BSD Style License in the LICENSE file.

// AUTO GENERATED FILE, DO NOT EDIT.
// 
// Generated by `ffigen`.

module bindings

extern import
  c file "test"

extern external/test1(a: bool, b: owned-c<bool>): bool
  c "test1"

pub struct test2
  a: bool

pub type test2-c
alias test2c = owned-c<test2-c>
alias test2cb = borrowed-c<test2-c>
alias test2ca = owned-c<c-array<test2-c>>

fun size-of(c: c-null<test2c>): int32
  c inline "sizeof(test2)"

inline extern test2-ptr/a(s: intptr_t): bool
  c inline "((test2*)#1)->a"

inline extern test2-ptr/set-a(s: intptr_t, a: bool): ()
  c inline "((test2*)#1)->a = #2"

pub fun test2c(): test2c
  malloc()

pub fun test2cc(c: test2c): test2c
  malloc-c()

pub fun test2c-array(n: int): test2ca
  malloc(n.int32)

pub inline fun test2c/a(^s: test2c): bool
  s.with-ptr(test2-ptr/a)

pub inline fun test2cb/a(^s: test2cb): bool
  s.with-ptr(test2-ptr/a)

pub inline fun test2c/set-a(^s: test2c, a: bool): ()
  s.with-ptr(fn(p) p.test2-ptr/set-a(a))

pub inline fun test2cb/set-a(^s: test2cb, a: bool): ()
  s.with-ptr(fn(p) p.test2-ptr/set-a(a))

fun test2/to-koka(s: test2c): test2
  test2(c.a)
